export = GIFEncoder;
declare class GIFEncoder {
    constructor(width: any, height: any, algorithm?: string, useOptimizer?: boolean, totalFrames?: number);
    width: number;
    height: number;
    algorithm: string;
    useOptimizer: boolean;
    totalFrames: number;
    frames: number;
    threshold: number;
    indexedPixels: Uint8Array | null;
    palSizeNeu: number;
    palSizeOct: number;
    sample: number;
    colorTab: any[] | null;
    reuseTab: boolean | null;
    colorDepth: number | null;
    usedEntry: any[];
    firstFrame: boolean;
    started: boolean;
    image: any;
    prevImage: any;
    dispose: number;
    repeat: number;
    delay: number;
    transparent: any;
    transIndex: number;
    readStreams: any[];
    out: ByteArray;
    createReadStream(rs: any): any;
    emitData(): void;
    start(): void;
    end(): void;
    addFrame(input: any): void;
    analyzePixels(): void;
    pixels: Uint8Array | null | undefined;
    quantizer: NeuQuant | OctreeQuant | undefined;
    colors: any[] | undefined;
    findClosest(c: any): number;
    setFrameRate(fps: any): void;
    setDelay(ms: any): void;
    setDispose(code: any): void;
    setRepeat(repeat: any): void;
    setTransparent(color: any): void;
    setQuality(quality: any): void;
    quality: any;
    setThreshold(threshold: any): void;
    setPaletteSize(size: any): void;
    writeLSD(): void;
    writeGraphicCtrlExt(): void;
    writeNetscapeExt(): void;
    writeImageDesc(): void;
    writePalette(): void;
    writeShort(pValue: any): void;
    writePixels(): void;
    finish(): void;
}
declare class ByteArray {
    data: any[];
    getData(): any;
    writeByte(val: any): void;
    writeUTFBytes(str: any): void;
    writeBytes(array: any, offset: any, length: any): void;
}
import NeuQuant = require("./TypedNeuQuant.js");
import { OctreeQuant } from "./OctreeQuant";
